"use strict";(self.webpackChunkrne_website=self.webpackChunkrne_website||[]).push([[172],{34248:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>p,default:()=>h,frontMatter:()=>o,metadata:()=>m,toc:()=>u});var a=n(87462),l=n(63366),r=(n(51702),n(1037)),i=n(29807),d=["components"],o={id:"slider",title:"Slider"},p=void 0,m={unversionedId:"components/slider",id:"components/slider",title:"Slider",description:"Usage",source:"@site/docs/components/Slider.mdx",sourceDirName:"components",slug:"/components/slider",permalink:"/docs/components/slider",draft:!1,editUrl:"https://github.com/docs/components/Slider.mdx",tags:[],version:"current",frontMatter:{id:"slider",title:"Slider"},sidebar:"docs",previous:{title:"Information",permalink:"/docs/components/information"},next:{title:"Stepper",permalink:"/docs/components/stepper"}},s={},u=[{value:"Usage",id:"usage",level:2},{value:"Props",id:"props",level:2}],k={toc:u},g="wrapper";function h(e){var t=e.components,n=(0,l.Z)(e,d);return(0,r.kt)(g,(0,a.Z)({},k,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("div",{class:"row inline-flex-center"},(0,r.kt)("div",{class:"col col--12"},(0,r.kt)(i.Z,{mdxType:"CodeBlock"},"import { Slider } from '@momo-kits/foundation';"))),(0,r.kt)("h2",{id:"props"},"Props"),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Includes all ",(0,r.kt)("a",{parentName:"p",href:"https://reactnative.dev/docs/view#props"},"View")," props.")),(0,r.kt)("div",{class:"table-responsive"},(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"allowLabelOverflow")),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"false")),(0,r.kt)("td",{parentName:"tr",align:null},"Optional. If ",(0,r.kt)("inlineCode",{parentName:"td"},"true"),", allows the label to extend beyond the width of the Slider component itself,rather than being clipped at the component boundaries. Defaults to ",(0,r.kt)("inlineCode",{parentName:"td"},"false")," if not provided.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"disableRange")),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"false")),(0,r.kt)("td",{parentName:"tr",align:null},"Optional. If ",(0,r.kt)("inlineCode",{parentName:"td"},"true"),", disables the range functionality of the slider, turning it into a regularsingle-value slider. Defaults to ",(0,r.kt)("inlineCode",{parentName:"td"},"false")," if not provided.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"disabledHigh")),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"false")),(0,r.kt)("td",{parentName:"tr",align:null},"Optional. If ",(0,r.kt)("inlineCode",{parentName:"td"},"true"),", the 'high' handle of the slider will be disabled and cannot be moved.Useful for setting a maximum limit that users cannot increase. Defaults to ",(0,r.kt)("inlineCode",{parentName:"td"},"false")," if not provided.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"disabledLow")),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"false")),(0,r.kt)("td",{parentName:"tr",align:null},"Optional. If ",(0,r.kt)("inlineCode",{parentName:"td"},"true"),", the 'low' handle of the slider will be disabled and cannot be moved.Useful for setting a minimum limit that users cannot decrease. Defaults to ",(0,r.kt)("inlineCode",{parentName:"td"},"false")," if not provided.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"floatingLabel")),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"false")),(0,r.kt)("td",{parentName:"tr",align:null},"Optional. If ",(0,r.kt)("inlineCode",{parentName:"td"},"true"),", labels will be displayed in a floating manner above the slider handles,typically used to display the current value. Defaults to ",(0,r.kt)("inlineCode",{parentName:"td"},"false")," if not provided.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"high")),(0,r.kt)("td",{parentName:"tr",align:null},"number"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"Optional. Represents the initial upper value of the range when used as a range slider.This value is part of the selected range, between 'low' and 'max'.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"low")),(0,r.kt)("td",{parentName:"tr",align:null},"number"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"Optional. Represents the initial lower value of the range when the component is used as a range slider.This value is part of the selected range, between 'min' and 'high'.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"max")),(0,r.kt)("td",{parentName:"tr",align:null},"number"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"Specifies the maximum value allowed for selection. This value sets the upper bound for the component.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"min")),(0,r.kt)("td",{parentName:"tr",align:null},"number"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"Specifies the minimum value permitted for selection in the slider. This value sets the lowerbound for the component.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"minRange")),(0,r.kt)("td",{parentName:"tr",align:null},"number"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"0")),(0,r.kt)("td",{parentName:"tr",align:null},"Optional. Defines the minimum permitted range between the low and high values of the slider.Particularly useful when 'low' and 'high' values both exist, ensuring a certain spread between them.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"onSliderTouchEnd")),(0,r.kt)("td",{parentName:"tr",align:null},"(low: number, high: number) => void"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"Optional. A callback function triggered when the user releases the slider's draggable area.It receives the current low and high values of the slider.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"onSliderTouchStart")),(0,r.kt)("td",{parentName:"tr",align:null},"(low: number, high: number) => void"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"Optional. A callback function triggered when the user starts touching the slider's draggable area.It receives the current low and high values of the slider.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"onValueChanged")),(0,r.kt)("td",{parentName:"tr",align:null},"(low: number, high: number, byUser: boolean) => void"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"Optional. A callback function triggered when the slider value changes, either by the user or programmatically.It receives the new low and high values of the slider, as well as a boolean indicating if the change was made by the user.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"step")),(0,r.kt)("td",{parentName:"tr",align:null},"number"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"Specifies the interval between individual step values. The slider's handle will move only in these increments."))))))}h.isMDXComponent=!0}}]);